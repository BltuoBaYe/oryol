//------------------------------------------------------------------------------
//  shaders.shd
//  Annotated GLSL shaders for MeshViewer sample
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//  common utility functions
//
@block Util
_func vec4 gamma(vec4 c) {
    float p = 1.0/2.2;
    return vec4(pow(c.xyz, vec3(p, p, p)), c.w);
}
@end

//------------------------------------------------------------------------------
//  normal visualization shader
//
@vs normalsVS
@uniform_block vsParams VSParams
    @uniform mat4 mvp ModelViewProjection
@end
@in vec4 position
@in vec4 normal
@out vec4 nrm
    _position = mul(mvp, position);
    nrm = normal;
@end

@fs normalsFS
@in vec4 nrm
    _color = nrm * 0.5 + 0.5;
@end

@bundle Normals
@program normalsVS normalsFS
@end

//------------------------------------------------------------------------------
//  lambert shader
//
@vs lambertVS
@uniform_block vsParams VSParams
    @uniform mat4 mvp ModelViewProjection
    @uniform mat4 model Model
@end
@in vec4 position
@in vec3 normal
@out vec3 N
    _position = mul(mvp, position);
    N = mul(model, vec4(normal, 0.0)).xyz;
@end

@fs lambertFS
@use Util
@uniform_block fsParams FSParams
    @uniform vec3 lightDir LightDir     // light dir in global space
    @uniform vec4 lightColor LightColor
    @uniform vec4 matDiffuse MatDiffuse
    @uniform bool gammaCorrect GammaCorrect
@end
@in vec3 N
    vec3 l = lightDir;
    vec3 n = normalize(N);
    float n_dot_l = max(dot(n, l), 0.0);
    vec4 col = vec4(lightColor.xyz * matDiffuse.xyz * n_dot_l, 1.0);
    if (gammaCorrect) {
        _color = gamma(col);
    }
    else {
        _color = col;
    }
@end

@bundle Lambert
@program lambertVS lambertFS
@end

//------------------------------------------------------------------------------
//  phong shader
//
@vs phongVS
@uniform_block vsParams VSParams
    @uniform mat4 mvp ModelViewProjection
    @uniform mat4 model Model
@end
@in vec4 position
@in vec4 normal
@out vec3 N
@out vec3 P
    _position = mul(mvp, position);
    P = mul(model, position).xyz;
    N = mul(model, vec4(normal.xyz, 0.0)).xyz;
@end

@fs phongFS
@use Util
@uniform_block fsParams FSParams
    @uniform vec3 lightDir LightDir     // light dir in global space
    @uniform vec3 eyePos EyePos
    @uniform vec4 lightColor LightColor
    @uniform vec4 matDiffuse MatDiffuse
    @uniform vec4 matSpecular MatSpecular
    @uniform bool gammaCorrect GammaCorrect
    @uniform float matSpecularPower MatSpecularPower
@end
@in vec3 N
@in vec3 P
    vec3 l = lightDir;
    vec3 n = normalize(N);
    vec3 v = normalize(eyePos - P);
    float n_dot_l = max(dot(n, l), 0.0);
    vec3 r = reflect(-l, n);
    float r_dot_v = max(dot(r, v), 0.0);

    float diff = n_dot_l;
    float spec = pow(r_dot_v, matSpecularPower) * n_dot_l;
    vec4 col = vec4(lightColor.xyz * (matSpecular.xyz*spec + matDiffuse.xyz*diff), 1.0);
    if (gammaCorrect) {
        _color = gamma(col);
    } else {
        _color = col;
    }
@end

@bundle Phong
@program phongVS phongFS
@end

