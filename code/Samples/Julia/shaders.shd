//------------------------------------------------------------------------------
//  shaders.shd
//------------------------------------------------------------------------------

@texture_block textures Textures
@texture sampler2D tex Texture
@end

@code_block util
_func vec4 hue2rgb(float h) {
    float r = abs(h * 6.0 - 4.0) - 1.0;
    float g = 2.0 - abs(h * 6.0 - 2.0);
    float b = 2.0 - abs(h * 6.0 - 4.0);
    return vec4(r, g, b, 1.0);
}
@end

//------------------------------------------------------------------------------
@uniform_block fractalVSParams VSParams
@uniform vec4 rect Rect
@end

@vs FractalVS
@use_uniform_block fractalVSParams
@in vec4 position
@in vec2 texcoord0
@out vec2 uv
@out vec2 pos
{
    _position = position;
    uv = texcoord0;
    pos = rect.xy + (texcoord0 * (rect.zw - rect.xy));
}
@end

@uniform_block juliaFSParams FSParams
@uniform vec2 juliaPos JuliaPos
@end

@fs JuliaFS
@highp float
@use_uniform_block juliaFSParams
@use_texture_block textures
@in vec2 uv
@in vec2 pos
{
    vec4 params = tex2D(tex, uv);
    float cr = params.x;
    float ci = params.y;
    float it = params.w;
    float d = cr*cr + ci*ci;
    if (d > 4.0) {
        _color = vec4(cr, ci, 1.0, it);
    }
    else {
        if (it < 1.0) {
            cr = pos.x;
            ci = pos.y;
        }
        float cr_new = cr*cr - ci*ci + juliaPos.x;
        float ci_new = 2.0 * cr*ci + juliaPos.y;
        _color = vec4(cr_new, ci_new, 0.0, it + 1.0);
    }
}
@end

@program JuliaShader FractalVS JuliaFS

//------------------------------------------------------------------------------
@vs ColorVS
@in vec4 position
@in vec2 texcoord0
@out vec2 uv
{
    _position = position;
    uv = texcoord0;
}
@end

@fs ColorFS
@use_texture_block textures
@in vec2 uv
{
    vec4 params = tex2D(tex, uv);
    if (params.z > 0.5) {
        float i = mod(params.w, 256.0) / 256.0;
        _color = vec4(i, i, i, 1.0);
    }
    else {
        _color = vec4(0.0, 0.0, 0.0, 1.0);
    }
}
@end

@program ColorShader ColorVS ColorFS

//------------------------------------------------------------------------------
@uniform_block shapeVSParams VSParams
@uniform mat4 mvp ModelViewProj
@uniform vec2 uvScale UVScale
@uniform float time Time
@end

@vs ShapeVS
@use_uniform_block shapeVSParams
@in vec4 position
@in vec2 texcoord0
@out vec4 norm
@out vec2 uv
{
    vec3 nrm3 = normalize(position.xyz);
    float s = sin(time * 0.25);
    float c = cos(time * 0.25);
    vec3 pos3 = position.xyz * s + nrm3 * -c;
    vec4 pos4 = vec4(pos3, 1.0);
    _position = mul(mvp, pos4);
    norm = mul(mvp, vec4(nrm3, 0.0));
    uv = texcoord0 * uvScale;
}
@end

@uniform_block shapeFSParams FSParams
@uniform float numColors NumColors
@end

@fs ShapeFS
@use_code_block util
@use_uniform_block shapeFSParams
@use_texture_block textures
@in vec4 norm
@in vec2 uv
{
    float i = tex2D(tex, uv).x;
    float hue = mod(i * 256.0, numColors) / numColors;
    _color = hue2rgb(hue);
}
@end

@program ShapeShader ShapeVS ShapeFS
