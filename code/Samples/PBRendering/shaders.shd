//------------------------------------------------------------------------------
//  shaders.shd
//  Annotated GLSL shaders for PBR sample.
// http://blog.selfshadow.com/publications/s2013-shading-course/hoffman/s2013_pbs_physics_math_notes.pdf
// http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf
//------------------------------------------------------------------------------

@vs vs
@uniform_block vsParams VSParams
    @uniform mat4 modelViewProj ModelViewProj
    @uniform mat4 modelView ModelView
@end
@in vec4 position
@in vec3 normal
@out vec3 viewSpacePos
@out vec3 viewSpaceNormal
    _position = mul(modelViewProj, position);
    viewSpacePos = mul(modelView, position).xyz;
    viewSpaceNormal = mul(modelView, vec4(normal, 0.0)).xyz;
@end

//------------------------------------------------------------------------------
//  perform gamma correction
@block Util
_func vec4 gamma(vec4 c) {
    float p = 1.0/2.2;
    return vec4(pow(abs(c.xyz), vec3(p, p, p)), c.w);
}
@end

//------------------------------------------------------------------------------
//  BRDF functions
//
@block BRDF

//------------------------------------------------------------------------------
//  D(h)
//  Trowbridge-Reitz
//
_const float PI = 3.14159265358979323846;
_const float c = 0.4;   // roughness

_func float square(float x) {
    return x * x;
}

_func float TrowbridgeReitz(float c, float n_dot_h) {
    float cSquared = c * c;
    return square(cSquared / (n_dot_h*n_dot_h*(cSquared - 1.0) + 1.0));
}

_func vec3 D_TrowbridgeReitz(vec3 L, vec3 V, vec3 N) {
    vec3 H = normalize(L + V);
    float D = TrowbridgeReitz(c, dot(N, H));
    // normalize
    D *= 1.0 / (c*c*PI);
    return vec3(D, D, D);
}

//------------------------------------------------------------------------------
//  D(h)
//  GGX
//
_func float GGX(float c, float cosThetaM) {
    float cosSquared = cosThetaM * cosThetaM;
    float tanSquared = (1.0 - cosSquared) / cosSquared;
    return (1.0 / PI) * square(c / (cosSquared * (c * c + tanSquared)));
}

_func vec3 D_GGX(vec3 L, vec3 V, vec3 N) {
    vec3 H = normalize(L + V);
    float D = GGX(c, dot(N, H));
    return vec3(D, D, D);
}

//------------------------------------------------------------------------------
//  G(l,v,h)
//  Schlick
//
_const float m = 0.25;

_func float Gsch(float v, float m) {
    float k = sqrt(2.0 * m * m / PI);
    return v > 0.0 ? v / (v - k * v + k) : 0.0;
}
_func vec3 G_Schlick(vec3 L, vec3 V, vec3 N) {
    float n_dot_l = dot(N, L);
    float n_dot_v = dot(N, V);
    float G = Gsch(n_dot_l, m) * Gsch(n_dot_v, m);
    return vec3(G, G, G);
}

_func float Gue4(float v, float k) {
    // hmm this is the same as Gsch except for how k is derived
    return v > 0.0 ? v / (v * (1.0 - k) + k) : 0.0;
}
_func vec3 G_UE4(vec3 L, vec3 V, vec3 N) {
    float k = ((c + 1.0) * (c + 1.0)) / 8.0;
    float n_dot_l = dot(N, L);
    float n_dot_v = dot(N, V);
    float G = Gue4(n_dot_l, k) * Gue4(n_dot_v, k);
    return vec3(G, G, G);
}

@end

@fs fs
@use Util BRDF
@uniform_block fsParams FSParams
    @uniform vec3 lightVec LightVec // must be in view space already
@end
@in vec3 viewSpacePos
@in vec3 viewSpaceNormal
    const vec3 eyePos = vec3(0.0, 0.0, 0.0);    // in view space, eye pos is at origin
    vec3 N = normalize(viewSpaceNormal);        // surface normal
    vec3 V = normalize(eyePos - viewSpacePos);  // view vector
    vec3 L = lightVec.xyz;                      // light vector

    float n_dot_l = dot(N, L);
    float n_dot_v = dot(N, V);

//    vec3 D = D_TrowbridgeReitz(L, V, N);
    vec3 D = D_GGX(L, V, N);
//    vec3 G = G_Schlick(L, V, N);
    vec3 G = G_UE4(L, V, N);

    vec3 spec = D * G;

    vec3 c = spec;// + clamp(n_dot_l, 0.0, 1.0) * vec3(0.2, 0.1, 0.1);
    _color = gamma(vec4(c, 1.0));
@end

@bundle Main
@program vs fs
@end


