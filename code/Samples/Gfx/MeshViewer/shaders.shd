//------------------------------------------------------------------------------
//  shaders.shd
//  Annotated GLSL shaders for MeshViewer sample
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//  common utility functions
//
@block Util 
vec4 gamma(vec4 c) {
    return vec4(pow(c.xyz, vec3(1.0/2.2)), c.w);
}
@end

//------------------------------------------------------------------------------
//  normal visualization shader
//
@vs normalsVS
@uniform mat4 mvp ModelViewProjection
@in vec4 position
@in vec4 normal
@out vec4 nrm
void main() {
    $position = mvp * position;
    nrm = normal;
}
@end

@fs normalsFS
@in vec4 nrm
void main() {
    $color = nrm * 0.5 + 0.5;
}
@end

@bundle Normals
@program normalsVS normalsFS
@end

//------------------------------------------------------------------------------
//  lambert shader
//
@vs lambertVS
@uniform mat4 mvp ModelViewProjection
@uniform mat4 model Model
@uniform vec3 lightDir LightDir
@in vec4 position
@in vec3 normal
@out vec3 L
@out vec3 N
void main() {
    $position = mvp * position;
    L = lightDir;
    N = vec4(model * vec4(normal, 0.0)).xyz;
}
@end

@fs lambertFS
@use Util
@uniform vec4 lightColor LightColor
@uniform vec4 matDiffuse MatDiffuse
@in vec3 L
@in vec3 N
void main() {
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    float n_dot_l = clamp(dot(n, l), 0.0, 1.0);
    $color = gamma(vec4(lightColor.xyz * matDiffuse.xyz * n_dot_l, 1.0));
}
@end

@bundle Lambert
@program lambertVS lambertFS
@end


