//------------------------------------------------------------------------------
//  shaders.shd
//  Annotated GLSL shaders for MeshViewer sample
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//  common utility functions
//
@block Util 
vec4 gamma(vec4 c) {
    return vec4(pow(c.xyz, vec3(1.0/2.2)), c.w);
}
@end

//------------------------------------------------------------------------------
//  normal visualization shader
//
@vs normalsVS
@uniform mat4 mvp ModelViewProjection
@in vec4 position
@in vec4 normal
@out vec4 nrm
void main() {
    $position = mvp * position;
    nrm = normal;
}
@end

@fs normalsFS
@in vec4 nrm
void main() {
    $color = nrm * 0.5 + 0.5;
}
@end

@bundle Normals
@program normalsVS normalsFS
@end

//------------------------------------------------------------------------------
//  lambert shader
//
@vs lambertVS
@uniform mat4 mvp ModelViewProjection
@uniform mat4 model Model
@in vec4 position
@in vec3 normal
@out vec3 N
void main() {
    $position = mvp * position;
    N = vec4(model * vec4(normal, 0.0)).xyz;
}
@end

@fs lambertFS
@use Util
@uniform vec3 lightDir LightDir     // light dir in global space
@uniform vec4 lightColor LightColor
@uniform vec4 matDiffuse MatDiffuse
@in vec3 N
void main() {
    vec3 l = lightDir;
    vec3 n = normalize(N);
    float n_dot_l = clamp(dot(n, l), 0.0, 1.0);
    $color = gamma(vec4(lightColor.xyz * matDiffuse.xyz * n_dot_l, 1.0));
}
@end

@bundle Lambert
@program lambertVS lambertFS
@end

//------------------------------------------------------------------------------
//  phong shader
//
@vs phongVS
@uniform mat4 mvp ModelViewProjection
@uniform mat4 model Model
@in vec4 position
@in vec4 normal
@out vec3 N
@out vec3 P
void main() {
    $position = mvp * position;
    P = vec4(model * position).xyz;
    N = vec4(model * vec4(normal.xyz, 0.0)).xyz;
}
@end

@fs phongFS
@use Util
@uniform vec3 lightDir LightDir     // light dir in global space
@uniform vec3 eyePos EyePos
@uniform vec4 lightColor LightColor
@uniform vec4 matDiffuse MatDiffuse
@uniform vec4 matSpecular MatSpecular
@uniform float matSpecularPower MatSpecularPower
@in vec3 P
@in vec3 N
void main() {
    vec3 l = lightDir;
    vec3 n = normalize(N);
    vec3 v = normalize(eyePos - P);
    float n_dot_l = clamp(dot(n, l), 0.0, 1.0);
    vec3 diffuse = matDiffuse.xyz * n_dot_l;
    vec3 r = reflect(-l, n);
    float r_dot_v = clamp(dot(r, v), 0.0, 1.0);
    vec3 specular = matSpecular.xyz * pow(r_dot_v, matSpecularPower);
    vec3 col = lightColor.xyz * (specular + diffuse);
    $color = gamma(vec4(col, 1.0));
}
@end

@bundle Phong
@program phongVS phongFS
@end

