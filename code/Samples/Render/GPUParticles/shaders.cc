//-----------------------------------------------------------------------------
// #version:1# machine generated, do not edit!
//-----------------------------------------------------------------------------
#include "Pre.h"
#include "shaders.h"

namespace Oryol {
namespace Shaders{
const char* drawVS_100_src = 
"#define _POSITION gl_Position\n"
"uniform mat4 mvp;\n"
"attribute vec4 position;\n"
"attribute vec4 color0;\n"
"attribute float instance0;\n"
"varying vec4 color;\n"
"void main() {\n"
"_POSITION = mvp * position;\n"
"color = color0;\n"
"}\n"
;
const char* emitVS_100_src = 
"#define _POSITION gl_Position\n"
"attribute vec4 position;\n"
"attribute vec2 texcoord0;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* updateVS_100_src = 
"#define _POSITION gl_Position\n"
"attribute vec4 position;\n"
"attribute vec2 texcoord0;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* drawFS_100_src = 
"precision mediump float;\n"
"#define _COLOR gl_FragColor\n"
"varying vec4 color;\n"
"void main() {\n"
"_COLOR = color;\n"
"}\n"
;
const char* emitFS_100_src = 
"precision mediump float;\n"
"#define _COLOR gl_FragColor\n"
"#define _COLOR gl_FragColor\n"
"uniform vec2 bufDims;\n"
"uniform float time;\n"
"varying vec2 uv;\n"
"float getParticleId(float bufferWidth) {\n"
"vec2 xy = floor(gl_FragCoord.xy);\n"
"return (xy.y * bufferWidth * 0.5) + (xy.x * 0.5);\n"
"}\n"
"bool atPosition() {\n"
"return mod(floor(gl_FragCoord.x), 2.0) < 0.5;\n"
"}\n"
"vec3 mod289(vec3 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec2 mod289(vec2 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec3 permute(vec3 x) {\n"
"return mod289(((x*34.0)+1.0)*x);\n"
"}\n"
"float snoise(vec2 v)\n"
"{\n"
"const vec4 C = vec4(0.211324865405187,\n"
"0.366025403784439,\n"
"-0.577350269189626,\n"
"0.024390243902439);\n"
"vec2 i  = floor(v + dot(v, C.yy) );\n"
"vec2 x0 = v -   i + dot(i, C.xx);\n"
"vec2 i1;\n"
"i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n"
"vec4 x12 = x0.xyxy + C.xxzz;\n"
"x12.xy -= i1;\n"
"i = mod289(i);\n"
"vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n"
"+ i.x + vec3(0.0, i1.x, 1.0 ));\n"
"vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n"
"m = m*m ;\n"
"m = m*m ;\n"
"vec3 x = 2.0 * fract(p * C.www) - 1.0;\n"
"vec3 h = abs(x) - 0.5;\n"
"vec3 ox = floor(x + 0.5);\n"
"vec3 a0 = x - ox;\n"
"m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n"
"vec3 g;\n"
"g.x  = a0.x  * x0.x  + h.x  * x0.y;\n"
"g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n"
"return 130.0 * dot(m, g);\n"
"}\n"
"void main() {\n"
"float particleId = getParticleId(bufDims.x);\n"
"if (atPosition()) {\n"
"_COLOR = vec4(snoise(vec2(particleId, 0.0)),\n"
"snoise(vec2(0.0, particleId * 0.1)),\n"
"snoise(vec2(particleId * 0.1, particleId * 0.01)),\n"
"1.0);\n"
"}\n"
"else {\n"
"_COLOR = vec4(0.0);\n"
"}\n"
"}\n"
;
const char* updateFS_100_src = 
"precision mediump float;\n"
"#define _COLOR gl_FragColor\n"
"varying vec2 uv;\n"
"void main() {\n"
"_COLOR = vec4(0.0, 1.0, 0.0, 1.0);\n"
"}\n"
;
const char* drawVS_120_src = 
"#version 120\n"
"#define _POSITION gl_Position\n"
"uniform mat4 mvp;\n"
"attribute vec4 position;\n"
"attribute vec4 color0;\n"
"attribute float instance0;\n"
"varying vec4 color;\n"
"void main() {\n"
"_POSITION = mvp * position;\n"
"color = color0;\n"
"}\n"
;
const char* emitVS_120_src = 
"#version 120\n"
"#define _POSITION gl_Position\n"
"attribute vec4 position;\n"
"attribute vec2 texcoord0;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* updateVS_120_src = 
"#version 120\n"
"#define _POSITION gl_Position\n"
"attribute vec4 position;\n"
"attribute vec2 texcoord0;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* drawFS_120_src = 
"#version 120\n"
"#define _COLOR gl_FragColor\n"
"varying vec4 color;\n"
"void main() {\n"
"_COLOR = color;\n"
"}\n"
;
const char* emitFS_120_src = 
"#version 120\n"
"#define _COLOR gl_FragColor\n"
"#define _COLOR gl_FragColor\n"
"uniform vec2 bufDims;\n"
"uniform float time;\n"
"varying vec2 uv;\n"
"float getParticleId(float bufferWidth) {\n"
"vec2 xy = floor(gl_FragCoord.xy);\n"
"return (xy.y * bufferWidth * 0.5) + (xy.x * 0.5);\n"
"}\n"
"bool atPosition() {\n"
"return mod(floor(gl_FragCoord.x), 2.0) < 0.5;\n"
"}\n"
"vec3 mod289(vec3 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec2 mod289(vec2 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec3 permute(vec3 x) {\n"
"return mod289(((x*34.0)+1.0)*x);\n"
"}\n"
"float snoise(vec2 v)\n"
"{\n"
"const vec4 C = vec4(0.211324865405187,\n"
"0.366025403784439,\n"
"-0.577350269189626,\n"
"0.024390243902439);\n"
"vec2 i  = floor(v + dot(v, C.yy) );\n"
"vec2 x0 = v -   i + dot(i, C.xx);\n"
"vec2 i1;\n"
"i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n"
"vec4 x12 = x0.xyxy + C.xxzz;\n"
"x12.xy -= i1;\n"
"i = mod289(i);\n"
"vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n"
"+ i.x + vec3(0.0, i1.x, 1.0 ));\n"
"vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n"
"m = m*m ;\n"
"m = m*m ;\n"
"vec3 x = 2.0 * fract(p * C.www) - 1.0;\n"
"vec3 h = abs(x) - 0.5;\n"
"vec3 ox = floor(x + 0.5);\n"
"vec3 a0 = x - ox;\n"
"m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n"
"vec3 g;\n"
"g.x  = a0.x  * x0.x  + h.x  * x0.y;\n"
"g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n"
"return 130.0 * dot(m, g);\n"
"}\n"
"void main() {\n"
"float particleId = getParticleId(bufDims.x);\n"
"if (atPosition()) {\n"
"_COLOR = vec4(snoise(vec2(particleId, 0.0)),\n"
"snoise(vec2(0.0, particleId * 0.1)),\n"
"snoise(vec2(particleId * 0.1, particleId * 0.01)),\n"
"1.0);\n"
"}\n"
"else {\n"
"_COLOR = vec4(0.0);\n"
"}\n"
"}\n"
;
const char* updateFS_120_src = 
"#version 120\n"
"#define _COLOR gl_FragColor\n"
"varying vec2 uv;\n"
"void main() {\n"
"_COLOR = vec4(0.0, 1.0, 0.0, 1.0);\n"
"}\n"
;
const char* drawVS_150_src = 
"#version 150\n"
"#define _POSITION gl_Position\n"
"uniform mat4 mvp;\n"
"in vec4 position;\n"
"in vec4 color0;\n"
"in float instance0;\n"
"out vec4 color;\n"
"void main() {\n"
"_POSITION = mvp * position;\n"
"color = color0;\n"
"}\n"
;
const char* emitVS_150_src = 
"#version 150\n"
"#define _POSITION gl_Position\n"
"in vec4 position;\n"
"in vec2 texcoord0;\n"
"out vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* updateVS_150_src = 
"#version 150\n"
"#define _POSITION gl_Position\n"
"in vec4 position;\n"
"in vec2 texcoord0;\n"
"out vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* drawFS_150_src = 
"#version 150\n"
"#define _COLOR _FragColor\n"
"in vec4 color;\n"
"out vec4 _FragColor;\n"
"void main() {\n"
"_COLOR = color;\n"
"}\n"
;
const char* emitFS_150_src = 
"#version 150\n"
"#define _COLOR _FragColor\n"
"#define _COLOR _FragColor\n"
"uniform vec2 bufDims;\n"
"uniform float time;\n"
"in vec2 uv;\n"
"out vec4 _FragColor;\n"
"float getParticleId(float bufferWidth) {\n"
"vec2 xy = floor(gl_FragCoord.xy);\n"
"return (xy.y * bufferWidth * 0.5) + (xy.x * 0.5);\n"
"}\n"
"bool atPosition() {\n"
"return mod(floor(gl_FragCoord.x), 2.0) < 0.5;\n"
"}\n"
"vec3 mod289(vec3 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec2 mod289(vec2 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec3 permute(vec3 x) {\n"
"return mod289(((x*34.0)+1.0)*x);\n"
"}\n"
"float snoise(vec2 v)\n"
"{\n"
"const vec4 C = vec4(0.211324865405187,\n"
"0.366025403784439,\n"
"-0.577350269189626,\n"
"0.024390243902439);\n"
"vec2 i  = floor(v + dot(v, C.yy) );\n"
"vec2 x0 = v -   i + dot(i, C.xx);\n"
"vec2 i1;\n"
"i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n"
"vec4 x12 = x0.xyxy + C.xxzz;\n"
"x12.xy -= i1;\n"
"i = mod289(i);\n"
"vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n"
"+ i.x + vec3(0.0, i1.x, 1.0 ));\n"
"vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n"
"m = m*m ;\n"
"m = m*m ;\n"
"vec3 x = 2.0 * fract(p * C.www) - 1.0;\n"
"vec3 h = abs(x) - 0.5;\n"
"vec3 ox = floor(x + 0.5);\n"
"vec3 a0 = x - ox;\n"
"m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n"
"vec3 g;\n"
"g.x  = a0.x  * x0.x  + h.x  * x0.y;\n"
"g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n"
"return 130.0 * dot(m, g);\n"
"}\n"
"void main() {\n"
"float particleId = getParticleId(bufDims.x);\n"
"if (atPosition()) {\n"
"_COLOR = vec4(snoise(vec2(particleId, 0.0)),\n"
"snoise(vec2(0.0, particleId * 0.1)),\n"
"snoise(vec2(particleId * 0.1, particleId * 0.01)),\n"
"1.0);\n"
"}\n"
"else {\n"
"_COLOR = vec4(0.0);\n"
"}\n"
"}\n"
;
const char* updateFS_150_src = 
"#version 150\n"
"#define _COLOR _FragColor\n"
"in vec2 uv;\n"
"out vec4 _FragColor;\n"
"void main() {\n"
"_COLOR = vec4(0.0, 1.0, 0.0, 1.0);\n"
"}\n"
;
Render::ProgramBundleSetup DrawParticles::CreateSetup() {
    Render::ProgramBundleSetup setup("DrawParticles");
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL100, drawVS_100_src, drawFS_100_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL120, drawVS_120_src, drawFS_120_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL150, drawVS_150_src, drawFS_150_src);
    setup.AddUniform("mvp", ModelViewProjection);
    return setup;
}
Render::ProgramBundleSetup EmitParticles::CreateSetup() {
    Render::ProgramBundleSetup setup("EmitParticles");
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL100, emitVS_100_src, emitFS_100_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL120, emitVS_120_src, emitFS_120_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL150, emitVS_150_src, emitFS_150_src);
    setup.AddUniform("bufDims", BufferDims);
    setup.AddUniform("time", Time);
    return setup;
}
Render::ProgramBundleSetup UpdateParticles::CreateSetup() {
    Render::ProgramBundleSetup setup("UpdateParticles");
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL100, updateVS_100_src, updateFS_100_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL120, updateVS_120_src, updateFS_120_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL150, updateVS_150_src, updateFS_150_src);
    return setup;
}
}
}

