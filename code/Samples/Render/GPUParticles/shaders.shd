//------------------------------------------------------------------------------
//  shaders.shd
//  Annotated GLSL shaders for GPUParticles sample
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//  Fragment shader util functions
//
@block FSUtil
// get particleId from current fragment coord
float getParticleId(float bufferWidth, vec2 fragCoord) {
    vec2 xy = floor(fragCoord);
    return (xy.y * bufferWidth * 0.5) + (xy.x * 0.5);
}

// check if currently 'rendering' position or velocity particle state
bool atPosition(vec2 fragCoord) {
    // this should be either 0.0 or 1.0, but avoid an exact comparison
    return mod(floor(fragCoord.x), 2.0) < 0.5;
}

// sample previous particle position
vec2 getParticlePosUv(vec2 bufDims, vec2 fragCoord) {
    vec2 posUv;
    if (atPosition(fragCoord)) {
        posUv = (fragCoord + vec2(0.25, 0.25)) / bufDims;
    }
    else {
        posUv = (fragCoord + vec2(-0.75, 0.25)) / bufDims;
    }
    return posUv;
}

// sample previous particle velocity
vec2 getParticleVelUv(vec2 bufDims, vec2 fragCoord) {
    vec2 velUv;
    if (atPosition(fragCoord)) {
        velUv = (fragCoord + vec2(1.25, 0.25)) / bufDims;
    }
    else {
        velUv = (fragCoord + vec2(0.25, 0.25)) / bufDims;
    }
    return velUv;
}
@end

//------------------------------------------------------------------------------
//  Vertex shader util functions
//
@block VSUtil
// compute particle position uv coord from particleId
vec2 posUvFromParticleId(float particleId, vec2 bufferDims) {
    float numParticlesAlongX = bufferDims.x * 0.5;
    float f = particleId / numParticlesAlongX;
    float fragCoordX = (fract(f) * numParticlesAlongX * 2.0) + 0.25;
    float fragCoordY = floor(f) + 0.25;
    vec2 posUV = vec2(fragCoordX, fragCoordY) / bufferDims;
    return posUV;
}
@end

//------------------------------------------------------------------------------
//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//
@block Noise
vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
    return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
{
    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
    0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
    -0.577350269189626,  // -1.0 + 2.0 * C.x
    0.024390243902439); // 1.0 / 41.0
    // First corner
    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);
    
    // Other corners
    vec2 i1;
    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
    //i1.y = 1.0 - i1.x;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    // x0 = x0 - 0.0 + 0.0 * C.xx ;
    // x1 = x0 - i1 + 1.0 * C.xx ;
    // x2 = x0 - 1.0 + 2.0 * C.xx ;
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    
    // Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
    + i.x + vec3(0.0, i1.x, 1.0 ));
    
    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
    m = m*m ;
    m = m*m ;
    
    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
    
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    
    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt( a0*a0 + h*h );
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
    
    // Compute final noise value at P
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}
@end

//------------------------------------------------------------------------------
//  A fullscreen-quad shader to emit new particles.
//
//  ParticleBufferLayout:
//
//  p0.pos | p0.vec | p1.pos | p1.vec | p2.pos | p2.vec |
//  p3.pos | p3.vec | ...
@vs emitVS
@in vec4 position
@in vec2 texcoord0
@out vec2 uv
void main() {
    $position = position;
    uv = texcoord0;
}
@end

@fs emitFS
@use Noise
@use FSUtil
@uniform vec2 bufDims BufferDims // BufferDims.x = width, BufferDims.y = height
@uniform float time Time
@in vec2 uv
void main() {
    // all particles start at position 0.0,0.0,0.0, but have
    // a random start velocity
    // the position w component 1.0 indicates that this particle is now live
    float particleId = getParticleId(bufDims.x, gl_FragCoord.xy);
    if (atPosition(gl_FragCoord.xy)) {
        // position starts always at 0
        $color = vec4(0.0, 0.0, 0.0, 1.0);
    }
    else {
        // select a pseudo random velocity vector
        $color = vec4(snoise(vec2(particleId, 0.0)),
                      snoise(vec2(0.0, particleId * 0.1)),
                      snoise(vec2(particleId * 0.1, particleId * 0.01)),
                      0.0);
    }
}
@end

@bundle EmitParticles
@program emitVS emitFS
@end

//------------------------------------------------------------------------------
@vs updateVS
@in vec4 position
@in vec2 texcoord0
@out vec2 uv
void main() {
    $position = position;
    uv = texcoord0;
}
@end

@fs updateFS
@use FSUtil
@uniform vec2 bufDims BufferDims
@uniform sampler2D prevState PrevState
@in vec2 uv
void main() {
    // load previous position and velocity
    vec2 posUv = getParticlePosUv(bufDims.xy, gl_FragCoord.xy);
    vec2 velUv = getParticleVelUv(bufDims.xy, gl_FragCoord.xy);
    if (atPosition(gl_FragCoord.xy)) {
        // update position
        vec4 pos = $texture2D(prevState, posUv);
        vec4 vel = $texture2D(prevState, velUv);
        pos += vel * (1.0/60.0);
        $color = pos;
    }
    else {
        // update velocity
        vec4 vel = $texture2D(prevState, velUv);
        $color = vel;
    }
}
@end

@bundle UpdateParticles
@program updateVS updateFS
@end

//------------------------------------------------------------------------------
@vs drawVS
@use VSUtil
@use Noise
@uniform mat4 mvp ModelViewProjection
@uniform vec2 bufDims BufferDims
@uniform sampler2D particleTex ParticleState
@in vec4 position
@in vec4 color0
@in float instance0
@out vec4 color
void main() {
    // instance0 is the particleId (0..N), compute texture coordinate from that
    float particleId = instance0;
    vec2 posUv = posUvFromParticleId(particleId, bufDims);

    // lookup the particle position
    vec4 particlePos = vec4($texture2D(particleTex, posUv).xyz, 0.0);

    $position = mvp * (position + particlePos);
    color = color0;
}
@end


@fs drawFS
@in vec4 color
void main() {
    $color = color;
}
@end

@bundle DrawParticles
@program drawVS drawFS
@end
