//-----------------------------------------------------------------------------
// #version:2# machine generated, do not edit!
//-----------------------------------------------------------------------------
#include "Pre.h"
#include "shaders.h"

namespace Oryol {
namespace Shaders{
const char* copyVS_100_src = 
"#define _POSITION gl_Position\n"
"attribute vec4 position;\n"
"attribute vec2 texcoord0;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* offscreenVS_100_src = 
"#define _POSITION gl_Position\n"
"attribute vec4 position;\n"
"attribute vec2 texcoord0;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* copyFS_100_src = 
"precision mediump float;\n"
"#define _COLOR gl_FragColor\n"
"#define _TEXTURE2D texture2D\n"
"uniform sampler2D tex;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_COLOR = _TEXTURE2D(tex, uv) * 0.01;\n"
"}\n"
;
const char* offscreenFS_100_src = 
"precision mediump float;\n"
"#define _COLOR gl_FragColor\n"
"uniform float time;\n"
"varying vec2 uv;\n"
"vec3 mod289(vec3 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec2 mod289(vec2 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec3 permute(vec3 x) {\n"
"return mod289(((x*34.0)+1.0)*x);\n"
"}\n"
"float snoise(vec2 v)\n"
"{\n"
"const vec4 C = vec4(0.211324865405187,\n"
"0.366025403784439,\n"
"-0.577350269189626,\n"
"0.024390243902439);\n"
"vec2 i  = floor(v + dot(v, C.yy) );\n"
"vec2 x0 = v -   i + dot(i, C.xx);\n"
"vec2 i1;\n"
"i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n"
"vec4 x12 = x0.xyxy + C.xxzz;\n"
"x12.xy -= i1;\n"
"i = mod289(i);\n"
"vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n"
"+ i.x + vec3(0.0, i1.x, 1.0 ));\n"
"vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n"
"m = m*m ;\n"
"m = m*m ;\n"
"vec3 x = 2.0 * fract(p * C.www) - 1.0;\n"
"vec3 h = abs(x) - 0.5;\n"
"vec3 ox = floor(x + 0.5);\n"
"vec3 a0 = x - ox;\n"
"m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n"
"vec3 g;\n"
"g.x  = a0.x  * x0.x  + h.x  * x0.y;\n"
"g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n"
"return 130.0 * dot(m, g);\n"
"}\n"
"void main() {\n"
"vec2 dx = vec2(time, 0.0);\n"
"vec2 dy = vec2(0.0, time);\n"
"vec2 dxy = vec2(time, time);\n"
"float red;\n"
"red  = (snoise((uv * 1.5) + dx) * 0.5) + 0.5;\n"
"red += snoise((uv * 5.0) + dx) * 0.15;\n"
"red += snoise((uv * 5.0) + dy) * 0.15;\n"
"float green;\n"
"green  = (snoise((uv * 1.5) + dy) * 0.5) + 0.5;\n"
"green += snoise((uv * 5.0) + dy) * 0.15;\n"
"green += snoise((uv * 5.0) + dx) * 0.15;\n"
"float blue;\n"
"blue  = (snoise((uv * 1.5) + dxy) * 0.5) + 0.5;\n"
"blue += snoise((uv * 5.0) + dxy) * 0.15;\n"
"blue += snoise((uv * 5.0) - dxy) * 0.15;\n"
"_COLOR = vec4(red, green, blue, 0.0) * 100.0;\n"
"}\n"
;
const char* copyVS_120_src = 
"#version 120\n"
"#define _POSITION gl_Position\n"
"attribute vec4 position;\n"
"attribute vec2 texcoord0;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* offscreenVS_120_src = 
"#version 120\n"
"#define _POSITION gl_Position\n"
"attribute vec4 position;\n"
"attribute vec2 texcoord0;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* copyFS_120_src = 
"#version 120\n"
"#define _COLOR gl_FragColor\n"
"#define _TEXTURE2D texture2D\n"
"uniform sampler2D tex;\n"
"varying vec2 uv;\n"
"void main() {\n"
"_COLOR = _TEXTURE2D(tex, uv) * 0.01;\n"
"}\n"
;
const char* offscreenFS_120_src = 
"#version 120\n"
"#define _COLOR gl_FragColor\n"
"uniform float time;\n"
"varying vec2 uv;\n"
"vec3 mod289(vec3 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec2 mod289(vec2 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec3 permute(vec3 x) {\n"
"return mod289(((x*34.0)+1.0)*x);\n"
"}\n"
"float snoise(vec2 v)\n"
"{\n"
"const vec4 C = vec4(0.211324865405187,\n"
"0.366025403784439,\n"
"-0.577350269189626,\n"
"0.024390243902439);\n"
"vec2 i  = floor(v + dot(v, C.yy) );\n"
"vec2 x0 = v -   i + dot(i, C.xx);\n"
"vec2 i1;\n"
"i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n"
"vec4 x12 = x0.xyxy + C.xxzz;\n"
"x12.xy -= i1;\n"
"i = mod289(i);\n"
"vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n"
"+ i.x + vec3(0.0, i1.x, 1.0 ));\n"
"vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n"
"m = m*m ;\n"
"m = m*m ;\n"
"vec3 x = 2.0 * fract(p * C.www) - 1.0;\n"
"vec3 h = abs(x) - 0.5;\n"
"vec3 ox = floor(x + 0.5);\n"
"vec3 a0 = x - ox;\n"
"m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n"
"vec3 g;\n"
"g.x  = a0.x  * x0.x  + h.x  * x0.y;\n"
"g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n"
"return 130.0 * dot(m, g);\n"
"}\n"
"void main() {\n"
"vec2 dx = vec2(time, 0.0);\n"
"vec2 dy = vec2(0.0, time);\n"
"vec2 dxy = vec2(time, time);\n"
"float red;\n"
"red  = (snoise((uv * 1.5) + dx) * 0.5) + 0.5;\n"
"red += snoise((uv * 5.0) + dx) * 0.15;\n"
"red += snoise((uv * 5.0) + dy) * 0.15;\n"
"float green;\n"
"green  = (snoise((uv * 1.5) + dy) * 0.5) + 0.5;\n"
"green += snoise((uv * 5.0) + dy) * 0.15;\n"
"green += snoise((uv * 5.0) + dx) * 0.15;\n"
"float blue;\n"
"blue  = (snoise((uv * 1.5) + dxy) * 0.5) + 0.5;\n"
"blue += snoise((uv * 5.0) + dxy) * 0.15;\n"
"blue += snoise((uv * 5.0) - dxy) * 0.15;\n"
"_COLOR = vec4(red, green, blue, 0.0) * 100.0;\n"
"}\n"
;
const char* copyVS_150_src = 
"#version 150\n"
"#define _POSITION gl_Position\n"
"in vec4 position;\n"
"in vec2 texcoord0;\n"
"out vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* offscreenVS_150_src = 
"#version 150\n"
"#define _POSITION gl_Position\n"
"in vec4 position;\n"
"in vec2 texcoord0;\n"
"out vec2 uv;\n"
"void main() {\n"
"_POSITION = position;\n"
"uv = texcoord0;\n"
"}\n"
;
const char* copyFS_150_src = 
"#version 150\n"
"#define _COLOR _FragColor\n"
"#define _TEXTURE2D texture\n"
"uniform sampler2D tex;\n"
"in vec2 uv;\n"
"out vec4 _FragColor;\n"
"void main() {\n"
"_COLOR = _TEXTURE2D(tex, uv) * 0.01;\n"
"}\n"
;
const char* offscreenFS_150_src = 
"#version 150\n"
"#define _COLOR _FragColor\n"
"uniform float time;\n"
"in vec2 uv;\n"
"out vec4 _FragColor;\n"
"vec3 mod289(vec3 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec2 mod289(vec2 x) {\n"
"return x - floor(x * (1.0 / 289.0)) * 289.0;\n"
"}\n"
"vec3 permute(vec3 x) {\n"
"return mod289(((x*34.0)+1.0)*x);\n"
"}\n"
"float snoise(vec2 v)\n"
"{\n"
"const vec4 C = vec4(0.211324865405187,\n"
"0.366025403784439,\n"
"-0.577350269189626,\n"
"0.024390243902439);\n"
"vec2 i  = floor(v + dot(v, C.yy) );\n"
"vec2 x0 = v -   i + dot(i, C.xx);\n"
"vec2 i1;\n"
"i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n"
"vec4 x12 = x0.xyxy + C.xxzz;\n"
"x12.xy -= i1;\n"
"i = mod289(i);\n"
"vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n"
"+ i.x + vec3(0.0, i1.x, 1.0 ));\n"
"vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n"
"m = m*m ;\n"
"m = m*m ;\n"
"vec3 x = 2.0 * fract(p * C.www) - 1.0;\n"
"vec3 h = abs(x) - 0.5;\n"
"vec3 ox = floor(x + 0.5);\n"
"vec3 a0 = x - ox;\n"
"m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n"
"vec3 g;\n"
"g.x  = a0.x  * x0.x  + h.x  * x0.y;\n"
"g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n"
"return 130.0 * dot(m, g);\n"
"}\n"
"void main() {\n"
"vec2 dx = vec2(time, 0.0);\n"
"vec2 dy = vec2(0.0, time);\n"
"vec2 dxy = vec2(time, time);\n"
"float red;\n"
"red  = (snoise((uv * 1.5) + dx) * 0.5) + 0.5;\n"
"red += snoise((uv * 5.0) + dx) * 0.15;\n"
"red += snoise((uv * 5.0) + dy) * 0.15;\n"
"float green;\n"
"green  = (snoise((uv * 1.5) + dy) * 0.5) + 0.5;\n"
"green += snoise((uv * 5.0) + dy) * 0.15;\n"
"green += snoise((uv * 5.0) + dx) * 0.15;\n"
"float blue;\n"
"blue  = (snoise((uv * 1.5) + dxy) * 0.5) + 0.5;\n"
"blue += snoise((uv * 5.0) + dxy) * 0.15;\n"
"blue += snoise((uv * 5.0) - dxy) * 0.15;\n"
"_COLOR = vec4(red, green, blue, 0.0) * 100.0;\n"
"}\n"
;
Render::ProgramBundleSetup Offscreen::CreateSetup() {
    Render::ProgramBundleSetup setup("Offscreen");
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL100, offscreenVS_100_src, offscreenFS_100_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL120, offscreenVS_120_src, offscreenFS_120_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL150, offscreenVS_150_src, offscreenFS_150_src);
    setup.AddUniform("time", Time);
    return setup;
}
Render::ProgramBundleSetup Copy::CreateSetup() {
    Render::ProgramBundleSetup setup("Copy");
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL100, copyVS_100_src, copyFS_100_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL120, copyVS_120_src, copyFS_120_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL150, copyVS_150_src, copyFS_150_src);
    setup.AddTextureUniform("tex", Texture);
    return setup;
}
}
}

