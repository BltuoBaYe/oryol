//-----------------------------------------------------------------------------
// #version:1# machine generated, do not edit!
//-----------------------------------------------------------------------------
#include "Pre.h"
#include "shaders.h"

namespace Oryol {
namespace Shaders{
const char* vs_100_src = 
"#define _POSITION gl_Position\n"
"uniform mat4 modelViewProj;\n"
"uniform mat4 modelView;\n"
"attribute vec4 position;\n"
"attribute vec3 normal;\n"
"varying vec3 viewSpacePos;\n"
"varying vec3 viewSpaceNormal;\n"
"void main() {\n"
"_POSITION = modelViewProj * position;\n"
"viewSpacePos = vec3(modelView * position);\n"
"viewSpaceNormal = vec3(modelView * vec4(normal, 0.0));\n"
"}\n"
;
const char* fs_100_src = 
"precision mediump float;\n"
"#define _COLOR gl_FragColor\n"
"uniform vec3 lightVec;\n"
"varying vec3 viewSpacePos;\n"
"varying vec3 viewSpaceNormal;\n"
"vec3 Fschlick(vec3 F0, vec3 l, vec3 h) {\n"
"return F0 + (vec3(1.0) - F0) * pow(1.0 - dot(l, h), 5.0);\n"
"}\n"
"float normalizedBlinnPhong(float specPower, float n_dot_h) {\n"
"float normTerm = (specPower + 2.0) / 2.0 * 3.1415926;\n"
"float blinnPhong = pow(n_dot_h, specPower);\n"
"return normTerm * blinnPhong;\n"
"}\n"
"vec4 gamma(vec4 c) {\n"
"return vec4(pow(c.xyz, vec3(1.0/2.2)), c.w);\n"
"}\n"
"void main() {\n"
"const float specPower = 256.0;\n"
"const vec3 spec = vec3(0.01,0.01,0.01);\n"
"const vec3 eyePos = vec3(0.0, 0.0, 0.0);\n"
"vec3 n = normalize(viewSpaceNormal);\n"
"vec3 v = normalize(eyePos - viewSpacePos);\n"
"vec3 l = lightVec.xyz;\n"
"vec3 h = normalize(l + v);\n"
"float n_dot_l = clamp(dot(n, l), 0.0, 1.0);\n"
"float n_dot_h = clamp(dot(n, h), 0.0, 1.0);\n"
"vec3 diffuse = vec3(n_dot_l);\n"
"float specularTerm = normalizedBlinnPhong(specPower, n_dot_h);\n"
"vec3 fresnelTerm = Fschlick(spec, l, h);\n"
"vec3 c = diffuse + vec3(specularTerm * n_dot_l);\n"
"_COLOR = gamma(vec4(c, 1.0));\n"
"}\n"
;
const char* vs_120_src = 
"#version 120\n"
"#define _POSITION gl_Position\n"
"uniform mat4 modelViewProj;\n"
"uniform mat4 modelView;\n"
"attribute vec4 position;\n"
"attribute vec3 normal;\n"
"varying vec3 viewSpacePos;\n"
"varying vec3 viewSpaceNormal;\n"
"void main() {\n"
"_POSITION = modelViewProj * position;\n"
"viewSpacePos = vec3(modelView * position);\n"
"viewSpaceNormal = vec3(modelView * vec4(normal, 0.0));\n"
"}\n"
;
const char* fs_120_src = 
"#version 120\n"
"#define _COLOR gl_FragColor\n"
"uniform vec3 lightVec;\n"
"varying vec3 viewSpacePos;\n"
"varying vec3 viewSpaceNormal;\n"
"vec3 Fschlick(vec3 F0, vec3 l, vec3 h) {\n"
"return F0 + (vec3(1.0) - F0) * pow(1.0 - dot(l, h), 5.0);\n"
"}\n"
"float normalizedBlinnPhong(float specPower, float n_dot_h) {\n"
"float normTerm = (specPower + 2.0) / 2.0 * 3.1415926;\n"
"float blinnPhong = pow(n_dot_h, specPower);\n"
"return normTerm * blinnPhong;\n"
"}\n"
"vec4 gamma(vec4 c) {\n"
"return vec4(pow(c.xyz, vec3(1.0/2.2)), c.w);\n"
"}\n"
"void main() {\n"
"const float specPower = 256.0;\n"
"const vec3 spec = vec3(0.01,0.01,0.01);\n"
"const vec3 eyePos = vec3(0.0, 0.0, 0.0);\n"
"vec3 n = normalize(viewSpaceNormal);\n"
"vec3 v = normalize(eyePos - viewSpacePos);\n"
"vec3 l = lightVec.xyz;\n"
"vec3 h = normalize(l + v);\n"
"float n_dot_l = clamp(dot(n, l), 0.0, 1.0);\n"
"float n_dot_h = clamp(dot(n, h), 0.0, 1.0);\n"
"vec3 diffuse = vec3(n_dot_l);\n"
"float specularTerm = normalizedBlinnPhong(specPower, n_dot_h);\n"
"vec3 fresnelTerm = Fschlick(spec, l, h);\n"
"vec3 c = diffuse + vec3(specularTerm * n_dot_l);\n"
"_COLOR = gamma(vec4(c, 1.0));\n"
"}\n"
;
const char* vs_150_src = 
"#version 150\n"
"#define _POSITION gl_Position\n"
"uniform mat4 modelViewProj;\n"
"uniform mat4 modelView;\n"
"in vec4 position;\n"
"in vec3 normal;\n"
"out vec3 viewSpacePos;\n"
"out vec3 viewSpaceNormal;\n"
"void main() {\n"
"_POSITION = modelViewProj * position;\n"
"viewSpacePos = vec3(modelView * position);\n"
"viewSpaceNormal = vec3(modelView * vec4(normal, 0.0));\n"
"}\n"
;
const char* fs_150_src = 
"#version 150\n"
"#define _COLOR _FragColor\n"
"uniform vec3 lightVec;\n"
"in vec3 viewSpacePos;\n"
"in vec3 viewSpaceNormal;\n"
"out vec4 _FragColor;\n"
"vec3 Fschlick(vec3 F0, vec3 l, vec3 h) {\n"
"return F0 + (vec3(1.0) - F0) * pow(1.0 - dot(l, h), 5.0);\n"
"}\n"
"float normalizedBlinnPhong(float specPower, float n_dot_h) {\n"
"float normTerm = (specPower + 2.0) / 2.0 * 3.1415926;\n"
"float blinnPhong = pow(n_dot_h, specPower);\n"
"return normTerm * blinnPhong;\n"
"}\n"
"vec4 gamma(vec4 c) {\n"
"return vec4(pow(c.xyz, vec3(1.0/2.2)), c.w);\n"
"}\n"
"void main() {\n"
"const float specPower = 256.0;\n"
"const vec3 spec = vec3(0.01,0.01,0.01);\n"
"const vec3 eyePos = vec3(0.0, 0.0, 0.0);\n"
"vec3 n = normalize(viewSpaceNormal);\n"
"vec3 v = normalize(eyePos - viewSpacePos);\n"
"vec3 l = lightVec.xyz;\n"
"vec3 h = normalize(l + v);\n"
"float n_dot_l = clamp(dot(n, l), 0.0, 1.0);\n"
"float n_dot_h = clamp(dot(n, h), 0.0, 1.0);\n"
"vec3 diffuse = vec3(n_dot_l);\n"
"float specularTerm = normalizedBlinnPhong(specPower, n_dot_h);\n"
"vec3 fresnelTerm = Fschlick(spec, l, h);\n"
"vec3 c = diffuse + vec3(specularTerm * n_dot_l);\n"
"_COLOR = gamma(vec4(c, 1.0));\n"
"}\n"
;
Render::ProgramBundleSetup Main::CreateSetup() {
    Render::ProgramBundleSetup setup("Main");
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL100, vs_100_src, fs_100_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL120, vs_120_src, fs_120_src);
    setup.AddProgramFromSources(0, Render::ShaderLang::GLSL150, vs_150_src, fs_150_src);
    setup.AddUniform("modelViewProj", ModelViewProj);
    setup.AddUniform("modelView", ModelView);
    setup.AddUniform("lightVec", LightVec);
    return setup;
}
}
}

